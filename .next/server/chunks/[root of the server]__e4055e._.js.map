{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/noahrizika/Documents/PersonalCodes/crypto-assignment/crypto-dashboard/src/lib/tokensData.ts"],"sourcesContent":["import { TokenMetadata } from \"@/lib/types\";\n\nexport const topEthereumTokensMetadata: Record<string, TokenMetadata> = {\n  WETH: {\n    name: \"Wrapped Ethereum\",\n    symbol: \"WETH\",\n    smartContract: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  },\n  USDT: {\n    name: \"Tether\",\n    symbol: \"USDT\",\n    smartContract: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n  },\n  USDC: {\n    name: \"USD Coin\",\n    symbol: \"USDC\",\n    smartContract: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eb48\",\n  },\n  WBTC: {\n    name: \"Wrapped Bitcoin\",\n    symbol: \"WBTC\",\n    smartContract: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n  },\n  DAI: {\n    name: \"Dai\",\n    symbol: \"DAI\",\n    smartContract: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  },\n  MATIC: {\n    name: \"Polygon\",\n    symbol: \"MATIC\",\n    smartContract: \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\",\n  },\n  SHIB: {\n    name: \"Shiba Inu\",\n    symbol: \"SHIB\",\n    smartContract: \"0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE\",\n  },\n  STETH: {\n    name: \"Lido Staked Ether\",\n    symbol: \"stETH\",\n    smartContract: \"0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\",\n  },\n};\n\nexport const topEthereumTokenSymbols = Object.keys(topEthereumTokensMetadata);\n"],"names":[],"mappings":";;;;AAEO,MAAM,4BAA2D;IACtE,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,KAAK;QACH,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,eAAe;IACjB;AACF;AAEO,MAAM,0BAA0B,OAAO,IAAI,CAAC"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/noahrizika/Documents/PersonalCodes/crypto-assignment/crypto-dashboard/src/lib/queries.ts"],"sourcesContent":["import { topEthereumTokensMetadata } from \"@/lib/tokensData\";\n\n// make an array of complete queries for each token\nexport const token24HrPricesQuery = (yesterdayUTC: string) => {\n  return Object.values(topEthereumTokensMetadata).map(\n    (token) =>\n      `query {\n            EVM(dataset: combined) {\n              DEXTrades(\n                orderBy: {descending: Block_Time}\n                where: {Trade: {Success: true, Buy: {Currency: {SmartContract: {is: \"${token.smartContract}\"}}, PriceInUSD: {gt: 0}}}, Block: {Time: {after: \"${yesterdayUTC}\"}}}\n              ) {\n                Trade {\n                  Buy {\n                    PriceInUSD\n                    Amount\n                  }\n                }\n              }\n            }\n          }`,\n  );\n};\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,uBAAuB,CAAC;IACnC,OAAO,OAAO,MAAM,CAAC,0HAAA,CAAA,4BAAyB,EAAE,GAAG,CACjD,CAAC,QACC,CAAC;;;;qFAI8E,EAAE,MAAM,aAAa,CAAC,mDAAmD,EAAE,aAAa;;;;;;;;;;WAUlK,CAAC;AAEZ"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///Users/noahrizika/Documents/PersonalCodes/crypto-assignment/crypto-dashboard/src/app/api/token-data/route.ts"],"sourcesContent":["import { token24HrPricesQuery } from \"@/lib/queries\";\nimport {\n  topEthereumTokensMetadata,\n  topEthereumTokenSymbols,\n} from \"@/lib/tokensData\";\nimport { BitqueryPriceResponse } from \"@/lib/types\";\nimport { error } from \"console\";\n\nconst { BITQUERY_ACCESS_TOKEN, BITQUERY_GRAPHQL_URL } = process.env;\n\nexport async function POST(): Promise<Response> {\n  if (!BITQUERY_ACCESS_TOKEN || !BITQUERY_GRAPHQL_URL) {\n    return new Response(\n      JSON.stringify({ error: \"Missing Bitquery Access Token or URL\" }),\n      { status: 500 },\n    );\n  }\n\n  const yesterdayUTC = new Date(Date.now() - 86400000).toISOString(); // subtract 86400000, which is 24 hours in ms\n  const queries = token24HrPricesQuery(yesterdayUTC);\n\n  try {\n    const formattedData = await Promise.all(\n      queries.map(async (query, index) => {\n        const response = await fetch(BITQUERY_GRAPHQL_URL, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${BITQUERY_ACCESS_TOKEN}`,\n          },\n          body: JSON.stringify({ query }),\n        });\n\n        if (!response.ok) {\n          console.error(\"Error response from Bitquery:\", response);\n          throw new Error(\n            `Error fetching data from Bitquery: ${response.statusText}`,\n          );\n        }\n\n        const data = (await response.json()) as BitqueryPriceResponse;\n        const tokenData = data.data.EVM.DEXTrades;\n        if (!tokenData) return null;\n\n        let volume = 0;\n        const prices = tokenData.map((item) => {\n          volume += +item.Trade.Buy.Amount; // type cast string to number\n          return item.Trade.Buy.PriceInUSD ?? 0;\n        });\n\n        const maxPrice = Math.max(...prices);\n        const minPrice = Math.min(...prices);\n        const firstPrice = prices[0] ?? 0;\n        const lastPrice = prices[prices.length - 1] ?? 0;\n        const symbol = topEthereumTokenSymbols[index] ?? \"\";\n        const name = topEthereumTokensMetadata[symbol]?.name ?? \"\";\n\n        return {\n          name: name,\n          symbol: symbol,\n          currPriceUSD: firstPrice,\n          //   volatility: estimateVolatility({ high: maxPrice, low: minPrice }),\n          volatility: garmanKlassVolatility({\n            high: maxPrice,\n            low: minPrice,\n            open: lastPrice,\n            close: firstPrice,\n          }),\n          priceMove: lastPrice === 0 ? 0 : (firstPrice - lastPrice) / lastPrice,\n          volume: volume.toFixed(3),\n        };\n      }),\n    );\n\n    // remove any null entries\n    const result = formattedData.filter((data) => data !== null);\n\n    return new Response(JSON.stringify(result), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error fetching and parsing Bitquery data:\", error);\n    return new Response(\n      JSON.stringify({ error: \"Failed to fetch and parse data\" }),\n      { status: 500 },\n    );\n  }\n}\n\n// using the Garman-Klass formula - good for a fixed trading period (https://www.algomatictrading.com/post/garman-klass-volatility)\nfunction garmanKlassVolatility({\n  high,\n  low,\n  open,\n  close,\n  timePeriod = 1,\n}: {\n  high: number;\n  low: number;\n  open: number;\n  close: number;\n  timePeriod?: number;\n}) {\n  if (high <= 0 || low <= 0 || open <= 0 || close <= 0) {\n    console.error(\"Invalid price values\");\n    return 0;\n  }\n\n  const term1 = 0.5 * Math.pow(Math.log(high / low), 2);\n  const term2 = (2 * Math.log(2) - 1) * Math.pow(Math.log(close / open), 2);\n  const volatility = Math.sqrt((term1 - term2) / timePeriod);\n\n  return volatility > 0 ? volatility : Number.EPSILON;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}